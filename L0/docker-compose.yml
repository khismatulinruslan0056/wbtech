version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DSN_USER}
      POSTGRES_PASSWORD: ${DSN_PASSWORD}
      POSTGRES_DB: ${DSN_NAME}
    ports:
      - "${DSN_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DSN_USER} -d ${DSN_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka_broker
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      sleep 5
      echo 'Creating topic user-events...'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-events --partitions 3 --replication-factor 1
      echo 'Creating topic user-events-dlq...'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-events-dlq --partitions 3 --replication-factor 1
      echo 'Successfully created topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    restart: "no"

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: migrator
    container_name: l0-migrate
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: l0-app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init-topics:
        condition: service_completed_successfully
      migrate:
        condition: service_completed_successfully
    ports:
      - "8081:8081"
    restart: unless-stopped
    volumes:
       - ./web:/app/web:ro

  importer:
    build:
      context: .
      dockerfile: Dockerfile
      target: importer
    container_name: l0-importer
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init-topics:
        condition: service_completed_successfully
    restart: "no"

volumes:
  postgres_data: