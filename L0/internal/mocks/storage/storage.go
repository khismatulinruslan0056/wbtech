// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "L0/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	storage "L0/internal/storage"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddDelivery provides a mock function with given fields: ctx, delivery
func (_m *Storage) AddDelivery(ctx context.Context, delivery *models.Delivery) (int64, error) {
	ret := _m.Called(ctx, delivery)

	if len(ret) == 0 {
		panic("no return value specified for AddDelivery")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Delivery) (int64, error)); ok {
		return rf(ctx, delivery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Delivery) int64); ok {
		r0 = rf(ctx, delivery)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Delivery) error); ok {
		r1 = rf(ctx, delivery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddItem provides a mock function with given fields: ctx, item
func (_m *Storage) AddItem(ctx context.Context, item *models.Item) (int64, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) (int64, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) int64); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Item) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddItems provides a mock function with given fields: ctx, item
func (_m *Storage) AddItems(ctx context.Context, item []*models.Item) ([]int64, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for AddItems")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.Item) ([]int64, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*models.Item) []int64); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*models.Item) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrder provides a mock function with given fields: ctx, order
func (_m *Storage) AddOrder(ctx context.Context, order *models.Order) (string, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) (string, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Order) string); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPayment provides a mock function with given fields: ctx, payment
func (_m *Storage) AddPayment(ctx context.Context, payment *models.Payment) (int64, error) {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for AddPayment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Payment) (int64, error)); ok {
		return rf(ctx, payment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Payment) int64); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTx provides a mock function with given fields: ctx, optsTx
func (_m *Storage) BeginTx(ctx context.Context, optsTx *sql.TxOptions) (storage.Tx, error) {
	ret := _m.Called(ctx, optsTx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 storage.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (storage.Tx, error)); ok {
		return rf(ctx, optsTx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) storage.Tx); ok {
		r0 = rf(ctx, optsTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, optsTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetALLDeliveries provides a mock function with given fields: _a0
func (_m *Storage) GetALLDeliveries(_a0 context.Context) ([]*models.Delivery, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetALLDeliveries")
	}

	var r0 []*models.Delivery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Delivery, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Delivery); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Delivery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllItems provides a mock function with given fields: _a0
func (_m *Storage) GetAllItems(_a0 context.Context) ([]*models.Item, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllItems")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Item, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Item); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: ctx
func (_m *Storage) GetAllOrders(ctx context.Context) ([]*models.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPayments provides a mock function with given fields: _a0
func (_m *Storage) GetAllPayments(_a0 context.Context) ([]*models.Payment, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPayments")
	}

	var r0 []*models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Payment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Payment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDelivery provides a mock function with given fields: ctx, OrderID
func (_m *Storage) GetDelivery(ctx context.Context, OrderID string) (*models.Delivery, error) {
	ret := _m.Called(ctx, OrderID)

	if len(ret) == 0 {
		panic("no return value specified for GetDelivery")
	}

	var r0 *models.Delivery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Delivery, error)); ok {
		return rf(ctx, OrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Delivery); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Delivery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemsByID provides a mock function with given fields: ctx, OrderID
func (_m *Storage) GetItemsByID(ctx context.Context, OrderID string) ([]*models.Item, error) {
	ret := _m.Called(ctx, OrderID)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByID")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Item, error)); ok {
		return rf(ctx, OrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Item); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, OrderID
func (_m *Storage) GetOrder(ctx context.Context, OrderID string) (*models.Order, error) {
	ret := _m.Called(ctx, OrderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Order, error)); ok {
		return rf(ctx, OrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: ctx, OrderID
func (_m *Storage) GetPayment(ctx context.Context, OrderID string) (*models.Payment, error) {
	ret := _m.Called(ctx, OrderID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Payment, error)); ok {
		return rf(ctx, OrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Payment); ok {
		r0 = rf(ctx, OrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, OrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retry provides a mock function with given fields: ctx, fn
func (_m *Storage) Retry(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Retry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *Storage) WithTx(tx storage.Tx) storage.Storage {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 storage.Storage
	if rf, ok := ret.Get(0).(func(storage.Tx) storage.Storage); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Storage)
		}
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
