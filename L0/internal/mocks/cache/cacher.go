// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	cache "L0/internal/cache"

	mock "github.com/stretchr/testify/mock"
)

// Cacher is an autogenerated mock type for the Cacher type
type Cacher struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *Cacher) Get(_a0 string) (*cache.Order, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *cache.Order
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*cache.Order, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *cache.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Load provides a mock function with given fields: orders
func (_m *Cacher) Load(orders map[string]*cache.Order) {
	_m.Called(orders)
}

// Put provides a mock function with given fields: order
func (_m *Cacher) Put(order *cache.Order) {
	_m.Called(order)
}

// NewCacher creates a new instance of Cacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cacher {
	mock := &Cacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
