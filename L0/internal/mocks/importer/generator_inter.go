// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GeneratorInter is an autogenerated mock type for the GeneratorInter type
type GeneratorInter struct {
	mock.Mock
}

// GenerateOrder provides a mock function with given fields: i, valid
func (_m *GeneratorInter) GenerateOrder(i int, valid bool) ([]byte, []byte, error) {
	ret := _m.Called(i, valid)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOrder")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(int, bool) ([]byte, []byte, error)); ok {
		return rf(i, valid)
	}
	if rf, ok := ret.Get(0).(func(int, bool) []byte); ok {
		r0 = rf(i, valid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int, bool) []byte); ok {
		r1 = rf(i, valid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(int, bool) error); ok {
		r2 = rf(i, valid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewGeneratorInter creates a new instance of GeneratorInter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeneratorInter(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeneratorInter {
	mock := &GeneratorInter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
