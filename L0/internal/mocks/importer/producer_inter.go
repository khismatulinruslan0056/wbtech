// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProducerInter is an autogenerated mock type for the ProducerInter type
type ProducerInter struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *ProducerInter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProduceMessage provides a mock function with given fields: _a0, _a1, _a2
func (_m *ProducerInter) ProduceMessage(_a0 context.Context, _a1 []byte, _a2 []byte) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ProduceMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProducerInter creates a new instance of ProducerInter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducerInter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProducerInter {
	mock := &ProducerInter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
